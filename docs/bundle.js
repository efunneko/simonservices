(()=>{var t={123:function(t){"undefined"!=typeof self&&self,t.exports=function(){"use strict";var t={407:function(t,e,n){n.d(e,{default:function(){return F}});var s=/([:*])(\w+)/g,i=/\*/g,o=/\/\?/g;function r(t){return void 0===t&&(t="/"),m()?location.pathname+location.search+location.hash:t}function a(t){return t.replace(/\/+$/,"").replace(/^\/+/,"")}function l(t){return"string"==typeof t}function h(t){return t&&t.indexOf("#")>=0&&t.split("#").pop()||""}function c(t){var e=a(t).split(/\?(.*)?$/);return[a(e[0]),e.slice(1).join("")]}function u(t){for(var e={},n=t.split("&"),s=0;s<n.length;s++){var i=n[s].split("=");if(""!==i[0]){var o=decodeURIComponent(i[0]);e[o]?(Array.isArray(e[o])||(e[o]=[e[o]]),e[o].push(decodeURIComponent(i[1]||""))):e[o]=decodeURIComponent(i[1]||"")}}return e}function p(t,e){var n,r=c(a(t.currentLocationPath)),p=r[0],d=r[1],f=""===d?null:u(d),m=[];if(l(e.path)){if(n="(?:/^|^)"+a(e.path).replace(s,(function(t,e,n){return m.push(n),"([^/]+)"})).replace(i,"?(?:.*)").replace(o,"/?([^/]+|)")+"$",""===a(e.path)&&""===a(p))return{url:p,queryString:d,hashString:h(t.to),route:e,data:null,params:f}}else n=e.path;var g=new RegExp(n,""),v=p.match(g);if(v){var y=l(e.path)?function(t,e){return 0===e.length?null:t?t.slice(1,t.length).reduce((function(t,n,s){return null===t&&(t={}),t[e[s]]=decodeURIComponent(n),t}),null):null}(v,m):v.groups?v.groups:v.slice(1);return{url:a(p.replace(new RegExp("^"+t.instance.root),"")),queryString:d,hashString:h(t.to),route:e,data:y,params:f}}return!1}function d(){return!("undefined"==typeof window||!window.history||!window.history.pushState)}function f(t,e){return void 0===t[e]||!0===t[e]}function m(){return"undefined"!=typeof window}function g(t,e){return void 0===t&&(t=[]),void 0===e&&(e={}),t.filter((function(t){return t})).forEach((function(t){["before","after","already","leave"].forEach((function(n){t[n]&&(e[n]||(e[n]=[]),e[n].push(t[n]))}))})),e}function v(t,e,n){var s=e||{},i=0;!function e(){t[i]?Array.isArray(t[i])?(t.splice.apply(t,[i,1].concat(t[i][0](s)?t[i][1]:t[i][2])),e()):t[i](s,(function(t){void 0===t||!0===t?(i+=1,e()):n&&n(s)})):n&&n(s)}()}function y(t,e){void 0===t.currentLocationPath&&(t.currentLocationPath=t.to=r(t.instance.root)),t.currentLocationPath=t.instance._checkForAHash(t.currentLocationPath),e()}function _(t,e){for(var n=0;n<t.instance.routes.length;n++){var s=p(t,t.instance.routes[n]);if(s&&(t.matches||(t.matches=[]),t.matches.push(s),"ONE"===t.resolveOptions.strategy))return void e()}e()}function b(t,e){t.navigateOptions&&(void 0!==t.navigateOptions.shouldResolve&&console.warn('"shouldResolve" is deprecated. Please check the documentation.'),void 0!==t.navigateOptions.silent&&console.warn('"silent" is deprecated. Please check the documentation.')),e()}function w(t,e){!0===t.navigateOptions.force?(t.instance._setCurrent([t.instance._pathToMatchObject(t.to)]),e(!1)):e()}v.if=function(t,e,n){return Array.isArray(e)||(e=[e]),Array.isArray(n)||(n=[n]),[t,e,n]};var C=m(),j=d();function k(t,e){if(f(t.navigateOptions,"updateBrowserURL")){var n=("/"+t.to).replace(/\/\//g,"/"),s=C&&t.resolveOptions&&!0===t.resolveOptions.hash;j?(history[t.navigateOptions.historyAPIMethod||"pushState"](t.navigateOptions.stateObj||{},t.navigateOptions.title||"",s?"#"+n:n),location&&location.hash&&(t.instance.__freezeListening=!0,setTimeout((function(){if(!s){var e=location.hash;location.hash="",location.hash=e}t.instance.__freezeListening=!1}),1))):C&&(window.location.href=t.to)}e()}function $(t,e){var n=t.instance;n.lastResolved()?v(n.lastResolved().map((function(e){return function(n,s){if(e.route.hooks&&e.route.hooks.leave){var i,o=t.instance.matchLocation(e.route.path,t.currentLocationPath,!1);i="*"!==e.route.path?!o:!(t.matches&&t.matches.find((function(t){return e.route.path===t.route.path}))),f(t.navigateOptions,"callHooks")&&i?v(e.route.hooks.leave.map((function(e){return function(n,s){return e((function(e){!1===e?t.instance.__markAsClean(t):s()}),t.matches&&t.matches.length>0?1===t.matches.length?t.matches[0]:t.matches:void 0)}})).concat([function(){return s()}])):s()}else s()}})),{},(function(){return e()})):e()}function x(t,e){f(t.navigateOptions,"updateState")&&t.instance._setCurrent(t.matches),e()}var O=[function(t,e){var n=t.instance.lastResolved();if(n&&n[0]&&n[0].route===t.match.route&&n[0].url===t.match.url&&n[0].queryString===t.match.queryString)return n.forEach((function(e){e.route.hooks&&e.route.hooks.already&&f(t.navigateOptions,"callHooks")&&e.route.hooks.already.forEach((function(e){return e(t.match)}))})),void e(!1);e()},function(t,e){t.match.route.hooks&&t.match.route.hooks.before&&f(t.navigateOptions,"callHooks")?v(t.match.route.hooks.before.map((function(e){return function(n,s){return e((function(e){!1===e?t.instance.__markAsClean(t):s()}),t.match)}})).concat([function(){return e()}])):e()},function(t,e){f(t.navigateOptions,"callHandler")&&t.match.route.handler(t.match),t.instance.updatePageLinks(),e()},function(t,e){t.match.route.hooks&&t.match.route.hooks.after&&f(t.navigateOptions,"callHooks")&&t.match.route.hooks.after.forEach((function(e){return e(t.match)})),e()}],E=[$,function(t,e){var n=t.instance._notFoundRoute;if(n){t.notFoundHandled=!0;var s=c(t.currentLocationPath),i=s[0],o=s[1],r=h(t.to);n.path=a(i);var l={url:n.path,queryString:o,hashString:r,data:null,route:n,params:""!==o?u(o):null};t.matches=[l],t.match=l}e()},v.if((function(t){return t.notFoundHandled}),O.concat([x]),[function(t,e){t.resolveOptions&&!1!==t.resolveOptions.noMatchWarning&&void 0!==t.resolveOptions.noMatchWarning||console.warn('Navigo: "'+t.currentLocationPath+"\" didn't match any of the registered routes."),e()},function(t,e){t.instance._setCurrent(null),e()}])];function I(){return(I=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t}).apply(this,arguments)}function L(t,e){var n=0;$(t,(function s(){n!==t.matches.length?v(O,I({},t,{match:t.matches[n]}),(function(){n+=1,s()})):x(t,e)}))}function P(t){t.instance.__markAsClean(t)}function S(){return(S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t}).apply(this,arguments)}var A="[data-navigo]";function F(t,e){var n,s=e||{strategy:"ONE",hash:!1,noMatchWarning:!1,linksSelector:A},i=this,o="/",f=null,C=[],j=!1,$=d(),x=m();function O(t){return t.indexOf("#")>=0&&(t=!0===s.hash?t.split("#")[1]||"/":t.split("#")[0]),t}function I(t){return a(o+"/"+a(t))}function F(t,e,n,s){return t=l(t)?I(t):t,{name:s||a(String(t)),path:t,handler:e,hooks:g(n)}}function H(t,e){if(!i.__dirty){i.__dirty=!0,t=t?a(o)+"/"+a(t):void 0;var n={instance:i,to:t,currentLocationPath:t,navigateOptions:{},resolveOptions:S({},s,e)};return v([y,_,v.if((function(t){var e=t.matches;return e&&e.length>0}),L,E)],n,P),!!n.matches&&n.matches}i.__waiting.push((function(){return i.resolve(t,e)}))}function N(t,e){if(i.__dirty)i.__waiting.push((function(){return i.navigate(t,e)}));else{i.__dirty=!0,t=a(o)+"/"+a(t);var n={instance:i,to:t,navigateOptions:e||{},resolveOptions:e&&e.resolveOptions?e.resolveOptions:s,currentLocationPath:O(t)};v([b,w,_,v.if((function(t){var e=t.matches;return e&&e.length>0}),L,E),k,P],n,P)}}function R(){if(x)return(x?[].slice.call(document.querySelectorAll(s.linksSelector||A)):[]).forEach((function(t){"false"!==t.getAttribute("data-navigo")&&"_blank"!==t.getAttribute("target")?t.hasListenerAttached||(t.hasListenerAttached=!0,t.navigoHandler=function(e){if((e.ctrlKey||e.metaKey)&&"a"===e.target.tagName.toLowerCase())return!1;var n=t.getAttribute("href");if(null==n)return!1;if(n.match(/^(http|https)/)&&"undefined"!=typeof URL)try{var s=new URL(n);n=s.pathname+s.search}catch(t){}var o=function(t){if(!t)return{};var e,n=t.split(","),s={};return n.forEach((function(t){var n=t.split(":").map((function(t){return t.replace(/(^ +| +$)/g,"")}));switch(n[0]){case"historyAPIMethod":s.historyAPIMethod=n[1];break;case"resolveOptionsStrategy":e||(e={}),e.strategy=n[1];break;case"resolveOptionsHash":e||(e={}),e.hash="true"===n[1];break;case"updateBrowserURL":case"callHandler":case"updateState":case"force":s[n[0]]="true"===n[1]}})),e&&(s.resolveOptions=e),s}(t.getAttribute("data-navigo-options"));j||(e.preventDefault(),e.stopPropagation(),i.navigate(a(n),o))},t.addEventListener("click",t.navigoHandler)):t.hasListenerAttached&&t.removeEventListener("click",t.navigoHandler)})),i}function D(t,e,n){var s=C.find((function(e){return e.name===t})),i=null;if(s){if(i=s.path,e)for(var r in e)i=i.replace(":"+r,e[r]);i=i.match(/^\//)?i:"/"+i}return i&&n&&!n.includeRoot&&(i=i.replace(new RegExp("^/"+o),"")),i}function T(t){var e=c(a(t)),s=e[0],i=e[1],o=""===i?null:u(i);return{url:s,queryString:i,hashString:h(t),route:F(s,(function(){}),[n],s),data:null,params:o}}function M(t,e,n){return"string"==typeof e&&(e=z(e)),e?(e.hooks[t]||(e.hooks[t]=[]),e.hooks[t].push(n),function(){e.hooks[t]=e.hooks[t].filter((function(t){return t!==n}))}):(console.warn("Route doesn't exists: "+e),function(){})}function z(t){return"string"==typeof t?C.find((function(e){return e.name===I(t)})):C.find((function(e){return e.handler===t}))}t?o=a(t):console.warn('Navigo requires a root path in its constructor. If not provided will use "/" as default.'),this.root=o,this.routes=C,this.destroyed=j,this.current=f,this.__freezeListening=!1,this.__waiting=[],this.__dirty=!1,this.__markAsClean=function(t){t.instance.__dirty=!1,t.instance.__waiting.length>0&&t.instance.__waiting.shift()()},this.on=function(t,e,s){var i=this;return"object"!=typeof t||t instanceof RegExp?("function"==typeof t&&(s=e,e=t,t=o),C.push(F(t,e,[n,s])),this):(Object.keys(t).forEach((function(e){if("function"==typeof t[e])i.on(e,t[e]);else{var s=t[e],o=s.uses,r=s.as,a=s.hooks;C.push(F(e,o,[n,a],r))}})),this)},this.off=function(t){return this.routes=C=C.filter((function(e){return l(t)?a(e.path)!==a(t):"function"==typeof t?t!==e.handler:String(e.path)!==String(t)})),this},this.resolve=H,this.navigate=N,this.navigateByName=function(t,e,n){var s=D(t,e);return null!==s&&(N(s.replace(new RegExp("^/?"+o),""),n),!0)},this.destroy=function(){this.routes=C=[],$&&window.removeEventListener("popstate",this.__popstateListener),this.destroyed=j=!0},this.notFound=function(t,e){return i._notFoundRoute=F("*",t,[n,e],"__NOT_FOUND__"),this},this.updatePageLinks=R,this.link=function(t){return"/"+o+"/"+a(t)},this.hooks=function(t){return n=t,this},this.extractGETParameters=function(t){return c(O(t))},this.lastResolved=function(){return f},this.generate=D,this.getLinkPath=function(t){return t.getAttribute("href")},this.match=function(t){var e={instance:i,currentLocationPath:t,to:t,navigateOptions:{},resolveOptions:s};return _(e,(function(){})),!!e.matches&&e.matches},this.matchLocation=function(t,e,n){void 0===e||void 0!==n&&!n||(e=I(e));var s={instance:i,to:e,currentLocationPath:e};return y(s,(function(){})),"string"==typeof t&&(t=void 0===n||n?I(t):t),p(s,{name:String(t),path:t,handler:function(){},hooks:{}})||!1},this.getCurrentLocation=function(){return T(a(r(o)).replace(new RegExp("^"+o),""))},this.addBeforeHook=M.bind(this,"before"),this.addAfterHook=M.bind(this,"after"),this.addAlreadyHook=M.bind(this,"already"),this.addLeaveHook=M.bind(this,"leave"),this.getRoute=z,this._pathToMatchObject=T,this._clean=a,this._checkForAHash=O,this._setCurrent=function(t){return f=i.current=t},function(){$&&(this.__popstateListener=function(){i.__freezeListening||H()},window.addEventListener("popstate",this.__popstateListener))}.call(this),R.call(this)}}},e={};function n(s){if(e[s])return e[s].exports;var i=e[s]={exports:{}};return t[s](i,i.exports,n),i.exports}return n.d=function(t,e){for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n(407)}().default}},e={};function n(s){var i=e[s];if(void 0!==i)return i.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";let t,e={_flatten:function(){for(var t=[],n=0;n<arguments.length;n++)if(arguments[n]instanceof Array)t.push.apply(t,e._flatten.apply(this,arguments[n]));else if(arguments[n]instanceof Function){let s=arguments[n]();s instanceof Array?t.push.apply(t,e._flatten.apply(this,s)):t.push(s)}else t.push(arguments[n]);return t}},s=1;class i{static init(e){t=e}constructor(t,e){this.id=s++,this.contents=[],this.attrs={},this.props=[],this.events={},this.opts={},this._refCount=0,t instanceof HTMLElement?(this.tag=t.tagName.toLowerCase(),this.el=t):this.tag=t.toLowerCase(),this._processParams(e),this.el&&this.dom()}appendChild(){this.isDomified=!1,this._processParams(arguments),this.el&&this.dom()}replaceChild(){this.el&&(this.el.innerHTML=""),this.isDomified=!1,this.contents=[],this.atts=[],this.props=[],this.appendChild.apply(this,arguments)}html(e,n){let s="";if(e||(e={}),e.depth||(e.depth=0),t.debug||"jstobject"!==this.tag){e.indent&&(s+=" ".repeat(e.indent*e.depth++)),s+="<"+this.tag;let t=[];for(let e of Object.keys(this.attrs)){let s=this.attrs[e];n&&("class"===e||"id"===e)&&s.match&&s.match(/(^|\s)-/)&&(s=s.replace(/(^|\s)(--?)/g,((t,e,s)=>e+("-"===s?n.getClassPrefix():n.getFullPrefix())))),t.push(e+'="'+this._quoteAttrValue(s)+'"')}t.length&&(s+=" "+t.join(" ")),this.props.length&&(s+=" "+this.props.join(" ")),s+=">",e.indent&&(s+="\n")}return this._visitContents(n,((t,n)=>{1===n.type?s+=n.value.html(e,t):4===n.type?s+=n.value.innerHTML:3===n.type?(e.indent&&e.depth&&(s+=" ".repeat(e.indent*e.depth)),s+=n.value,e.indent&&e.depth&&(s+="\n")):console.warn("Unexpected content type while serializing:",n.type)})),e.indent&&e.depth&&(e.depth--,s+=" ".repeat(e.indent*e.depth)),(t.debug||"jstobject"!==this.tag)&&(s+=`</${this.tag}>`,e.indent&&(s+="\n")),s}dom(t,e){if("-deleted-"===this.tag)return void console.error("Trying to DOM a deleted element",this);let n=this.el;if(n||(n=this.ns?document.createElementNS(this.ns,this.tag):document.createElement(this.tag)),this.ref&&t&&t.setRef(this.ref,this),t&&"form"===this.tag&&(this.attrs.name||this.attrs.ref||this.attrs.id)?e=t.addForm(this):!e||"input"!==this.tag&&"textarea"!==this.tag&&"select"!==this.tag||e.addInput(this),!this.isDomified){this.jstComponent=t;for(let e of Object.keys(this.attrs)){let s=this.attrs[e];t&&("class"===e||"id"===e)&&s.match&&s.match(/(^|\s)-/)&&(s=s.replace(/(^|\s)(--?)/g,((e,n,s)=>n+("-"===s?t.getClassPrefix():t.getFullPrefix())))),n.setAttribute(e,s)}for(let t of this.props)n[t]=!0;for(let t of Object.keys(this.events))n.addEventListener(t,this.events[t].listener);this._visitContents(t,((t,s)=>{if(3===s.type)s.el||(s.el=document.createTextNode(s.value),n.appendChild(s.el));else if(1===s.type){let i=s.value.el,o=s.value.dom(t,e);i?o.parentNode&&o.parentNode!==n&&(o.parentNode.removeChild(o),n.appendChild(o)):n.appendChild(o)}else console.error("Unexpected contents item type:",s.type)}),(t=>{t.parentEl=n}))}return this.el=n,this.isDomified=!0,n}delete(){if(this._refCount--,this._refCount<=0){for(let t of this.contents)this._deleteItem(t);delete this.jstComponent,this.el&&this.el.parentNode&&this.el.parentNode.removeChild(this.el),delete this.el,this.tag="-deleted-",this.contents=[],this.attrs={},this.props=[]}}add(){this._refCount++}_compareAndCopy(t,e,n,s,i){let o=0,r=0,a=[];if(!e){if(s||this.opts.forceUpdate||this.tag!==t.tag)return!0;this.opts=t.opts;for(let e of Object.keys(this.attrs))if(t.attrs[e]){if(t.attrs[e]!==this.attrs[e]&&(this.attrs[e]=t.attrs[e],this.isDomified)){let n=t.attrs[e];this.jstComponent&&("class"===e||"id"===e)&&n.match(/(^|\s)-/)&&(n=n.replace(/(^|\s)(--?)/g,((t,e,n)=>e+("-"===n?this.jstComponent.getClassPrefix():this.jstComponent.getFullPrefix())))),this.el.setAttribute(e,n)}}else delete this.attrs[e],this.isDomified&&this.el.removeAttribute(e);for(let e of Object.keys(t.attrs))if(!this.attrs[e]&&(this.attrs[e]=t.attrs[e],this.isDomified)){let n=t.attrs[e];this.jstComponent&&("class"===e||"id"===e)&&n.match(/(^|\s)-/)&&(n=n.replace(/(^|\s)(--?)/g,((t,e,n)=>e+("-"===n?this.jstComponent.getClassPrefix():this.jstComponent.getFullPrefix())))),this.el.setAttribute(e,n)}if(this.props.length||t.props.length){let e=!1;if(this.props.length!=t.props.length)e=!0;else for(let n=0;n<this.props.length;n++)if(this.props[n]!==t.props[n]){e=!0;break}if(e){if(this.isDomified){for(let t of this.props)delete this.el[t];for(let e of t.props)this.el[e]=!0}this.props=t.props}}for(let e of Object.keys(this.events))t.events[e]?t.events[e].listener!==this.events[e].listener&&(this.isDomified&&(this.el.removeEventListener(e,this.events[e].listener),this.el.addEventListener(e,t.events[e].listener)),this.events[e]=t.events[e]):(this.isDomified&&this.el.removeEventListener(e,this.events[e].listener),delete this.events[e]);for(let e of Object.keys(t.events))this.events[e]||(this.events[e]=t.events[e],this.isDomified&&this.el.addEventListener(e,t.events[e].listener))}if(!s&&!this.opts.forceUpdate)for(;;){let e=this.contents[o],s=t.contents[r];if(!e||!s)break;if(e.type!==s.type)break;if(1===e.type){if(e.value.id!==s.value.id&&s.value._refCount>1)break;if(e.value._compareAndCopy(s.value,!1,n,void 0,i+1))break;e.value.id===s.value.id&&this._deleteItem(s)}else if(2===e.type){if(e.value._jstId!==s.value._jstId){let i=this.contents[o+1],l=t.contents[r+1];if(!i||!l)break;if(2===l.type&&e.value._jstId===l.value._jstId){let t=e.value._jstEl._getFirstEl();this._moveOrRenderInDom(s,n,t),this.contents.splice(o,0,s),r++,o++,s=l}else if(2===i.type&&i.value._jstId===s.value._jstId)this.contents.splice(o,1),a.push(e);else{if(2!==i.type||2!==l.type||i.value._jstId!==l.value._jstId)break;{let t=i.value._jstEl._getFirstEl();this._moveOrRenderInDom(s,n,t),this.contents[o]=s,o++,r++,s=l,a.push(e)}}}}else 3===e.type&&e.value!==s.value&&(e.el&&(e.el.textContent=s.value),e.value=s.value);o++,r++,2===s.type&&s.value._unrender()}let l=o,h=this.contents[o];for(;h;)a.push(h),o++,h=this.contents[o];if(this.contents.splice(l,o-l),t.contents[r]){let e=t.contents.splice(r,t.contents.length-r);e.forEach((t=>{1===t.type?t.value.el&&t.value.el.parentNode?(t.value.el.parentNode.removeChild(t.value.el),this.el?this.el.appendChild(t.value.el):delete this.el):this.el?this.el.appendChild(t.value.dom(n)):n&&n.parentEl?n.parentEl.appendChild(t.value.dom(n)):console.warn("Not adding an element to the DOM",t.value.tag,t,this,n):3===t.type?this.el?t.el?(t.el.parentNode&&t.el.parentNode.removeChild(t.el),this.el.appendChild(t.el)):(t.el=document.createTextNode(t.value),this.el.appendChild(t.el)):n&&n.parentEl?(t.el=document.createTextNode(t.value),n.parentEl.appendChild(t.el)):console.warn("Not adding an element to the DOM",t.value.tag,t,this,n):2===t.type&&this._moveOrRenderInDom(t,n)})),this.contents.splice(l,0,...e)}for(let t of a)this._deleteItem(t);return!1}_moveOrRenderInDom(t,e,n){t.value._jstEl.el?t.value._jstEl.el.parentNode&&(t.value._jstEl.el.parentNode.removeChild(t.value._jstEl.el),this.el&&this._addChildNode(this.el,t.value._jstEl.el,n)):(t.value._jstEl._visitContents(t.value,((t,s)=>{s.value&&(s.value.el?s.value.el.parentNode&&(s.value.el.parentNode.removeChild(s.value.el),this.el?this._addChildNode(this.el,s.value.el,n):e.parentEl&&this._addChildNode(e.parentEl,s.value.el,n)):this.el?this._addChildNode(this.el,s.value.dom(t),n):e.parentEl&&this._addChildNode(e.parentEl,s.value.dom(t),n))}),(t=>{t.parentEl=this.el||e.parentEl})),t.value.parentEl=this.el||e.parentEl)}_getFirstEl(){let t=this.contents[0];return 2===t.type?t.value._jstEl._getFirstEl():t.value&&t.value.el}_addChildNode(t,e,n){n?t.insertBefore(e,n):t.appendChild(e)}_deleteItem(t){1===t.type?t.value.delete():2===t.type?t.value._unrender():3===t.type?t.el&&t.el.parentNode&&(t.el.parentNode.removeChild(t.el),delete t.el):console.warn("Unexpected content type while deleting:",t.type)}_processParams(t,n){void 0===(t=e._flatten.apply(this,t))&&(t=[]);for(let e of t){let t=typeof e;if(null===e);else if("number"===t||"string"===t)this.contents.push({type:3,value:e});else if("boolean"===t)this.contents.push({type:3,value:e.toString()});else if(e instanceof u)this.contents.push({type:2,value:e}),e.refresh({isParentUpdate:!0});else if(e instanceof i)e.add(),this.contents.push({type:1,value:e});else if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement){let t=new i(e);t.add(),this.contents.push({type:1,value:t})}else if("object"===t)for(let t of Object.keys(e))if(void 0===e[t]&&(e[t]=""),"jstoptions"===t&&e.jstoptions instanceof Object)this.opts=e.jstoptions;else if("properties"===t&&e.properties instanceof Array)for(let t of e.properties)this.props.push(t);else if("events"===t&&"object"==typeof e.events)for(let t of Object.keys(e.events))e.events[t]instanceof Function?this.events[t]={listener:e.events[t]}:this.events[t]=e.events[t];else"ref"===t?(this.ref=e[t],this.attrs.ref=e[t]):"cn"===t?this.attrs.class?this.attrs.class+=" "+e[t]:this.attrs.class=e[t]:""!==e[t]&&(this.attrs[t]=e[t]);else"undefined"===t||(e.toString?this.contents.push({type:3,value:e.toString()}):console.warn("Unknown JstElement parameter type: ",t))}}_processCss(e,n){n&&t.styleManager.updateCss(e,n)}_quoteAttrValue(t){return t.replace?t.replace(/"/,'"'):t}_visitContents(e,n,s){this.contents.forEach((i=>{2===i.type?(s&&s(i.value),i.value._jstEl&&(t.debug?n(i.value,{type:1,value:i.value._jstEl}):i.value._jstEl._visitContents(i.value,n,s))):n(e,i)}))}}class o{constructor(t){this.jstElement=t,this.inputs={}}addInput(t){let e=t.attrs.name||t.attrs.id;e&&(this.inputs[e]?Array.isArray(this.inputs[e])?this.inputs[e].push(t):this.inputs[e]=[this.inputs[e],t]:this.inputs[e]=t)}setJstElement(t){this.jstElement=t}getValues(){let t={};for(let e of Object.keys(this.inputs))if(Array.isArray(this.inputs[e]))if(!this.inputs[e][0].attrs.type||"radio"!==this.inputs[e][0].attrs.type.toLowerCase()&&"checkbox"!==this.inputs[e][0].attrs.type.toLowerCase())t[e]=this.inputs[e][0].el.value;else for(let n of this.inputs[e])n.el.checked&&(void 0===n.attrs.value?t[e]=n.attrs.id:t[e]=n.attrs.value);else!this.inputs[e].attrs.type||"radio"!==this.inputs[e].attrs.type.toLowerCase()&&"checkbox"!==this.inputs[e].attrs.type.toLowerCase()?t[e]=this.inputs[e].el.value:this.inputs[e].el.checked&&(void 0===this.inputs[e].attrs.value?t[e]=this.inputs[e].attrs.id:t[e]=this.inputs[e].attrs.value);return t}}let r,a,l,h=1,c=1;class u{static init(t){r=t}constructor(t){this._jstId=h++,this._companionObj=t,this._renderFunc=void 0,this._forms={},this._wasRendered=!1,this._jstEl=void 0,this._refCount=0,this.updateWithParent=!1,this.constructor.prototype._jstClassIds||(this.constructor.prototype._jstClassIds={}),this.constructor.prototype._jstClassIds[this.constructor.name]||(this.constructor.prototype._jstClassIds[this.constructor.name]=c++),this._jstClassId=this.constructor.prototype._jstClassIds[this.constructor.name],this._classPrefix=`jsto${this._jstClassId}-`,this._fullPrefix=`jsto${this._jstClassId}-i${this._jstId}-`,this._type=`${this.getName()}-${this.getFullPrefix()}`}destroy(){r.styleManager.removeCss(this)}refresh(t){let e=!!t&&t.isParentUpdate;if((e||this._jstEl)&&(this._refCount++,!this._jstEl&&e||e&&this.updateWithParent||!e)){if(!t||!t.skipCss){let e=this.renderCss(t);e&&r.styleManager.updateCss(this,e)}let e=this._render(),n=new i("jstobject",[{type:this.getType()}]);n._processParams([e],!0),this._jstEl?(this._jstEl._compareAndCopy(n,!0,this,!1,0),this._unrender()):this._jstEl=n,this._jstEl.isDomified&&this._jstEl.dom(this),Promise.resolve().then((()=>this._postRender()))}}html(t){return this._jstEl||this.refresh({isParentUpdate:!0}),this._jstEl.html(t)}_render(){let t=this.render();return this._wasRendered=!0,t}render(){if(this._renderFunc)return this._renderFunc(this._companionObj);throw this._companionObj?new Error("You must define a render function with .fill()"):new Error("You must override render() in descendant classes")}_postRender(){this.postRender()}postRender(){}_unrender(){if(this._refCount--,this._refCount<0)throw new Error("Invalid ref count in jstobject",this);0==this._refCount&&(this.unrender(),this._jstEl&&(this._jstEl.delete(),delete this._jstEl),this.destroy())}unrender(){}renderCss(){let t={},e=!1;for(let n of["cssGlobal","cssLocal","cssInstance"])if(this[n]){let s=this[n]();s&&(t[n]=this._normalizeCss(s),e=!0)}return e?t:void 0}getWasRendered(){return this._wasRendered}getClassPrefix(){return this._classPrefix}getFullPrefix(){return this._fullPrefix}getUpdateWithParent(){return this.updateWithParent}fill(t){if("function"!=typeof t)throw new Error(".fill() expects a function to be passed in");return this._renderFunc=t,this}getName(){return this.constructor.name}getType(){return this._type}addForm(t){let e=t.attrs.name||t.attrs.id||"_unnamed_";return this._forms[e]?this._forms[e].setJstElement(t):this._forms[e]=new o(t),t.attrs.ref&&(this[t.attrs.ref]=this._forms[e]),this._forms[e]}getFormValues(t){let e=this._forms[t||"_unnamed_"];return e?e.getValues():{}}setRef(t,e){this._companionObj?this._companionObj[t]=e:this[t]=e}_getCodeLocation(){}_normalizeCss(t){let n=e._flatten(t),s=[];return n.map((t=>{t instanceof Object?s=s.concat(this._normalizeCssObject(t)):s.push(t)})),s}_normalizeCssObject(t){const n=new Set(["$media","$keyframes","$supports","$page","$fontFace","$viewport","$counterStyle","$fontFeatureValues","$swash","$ornaments","$stylistic","$styleset","$characterVariant"]);let s=[];for(let i of Object.keys(t)){let o,r={};if(n.has(i)){let e=this._normalizeCssObject(t[i]);o=i.replace(/^\$/,"@").replace(/([A-Z])/g,(t=>"-"+t.toLowerCase())),e.map((t=>r=Object.assign(r,t)))}else{let n=i.split("$");o=n.shift();for(let t of n)o="c"===t?`.${o}`:"i"===t?`#${o}`:`${o}:${t}`;e._flatten(t[i]).map((t=>{r=t instanceof Object?Object.assign(r,this._normalizeCssStyles(t)):t}))}let a={};a[o]=r,s.push(a)}return s}_normalizeCssStyles(t){let n={};for(let s of Object.keys(t)){let i=t[s];if(i instanceof Object&&!Array.isArray(i))if(i.rgb&&i.rgb().string)n[s]=i.rgb().string();else{let e=this._normalizeCssStyles(t[s]);n[s]=[e]}else{let i=e._flatten(t[s]),o=s.match(/^([^$]+)\$(.+)/);o?(i=i.map((t=>this._addCssUnit(o[2],t))),n[o[1]]=i):n[s]=i}}return n}_addCssUnit(t,e){return"number"==typeof e?`${e}${t||""}`:e&&e.toString?e.toString():e}}class p extends u{static init(t){a=t}constructor(t,e){super(),this.classPrefix=t,this.className=e,this.css={cssGlobal:[],cssLocal:[],cssInstance:{}}}updateCss(t,e){let n=this._processCss(t,e);this.css.cssGlobal=n.cssGlobal,this.css.cssLocal=n.cssLocal,this.css.cssInstance||(this.css.cssInstance={}),this.css.cssInstance[t]=n.cssInstance,this.refresh()}removeCss(t){this.css.cssInstance[t]&&(delete this.css.cssInstance[t],this.refresh())}render(){return["cssGlobal","cssLocal","cssInstance"].map((t=>{if(this.css&&this.css[t])return"cssInstance"===t?Object.values(this.css.cssInstance).map((t=>t.map((t=>a.$style(t))))):this.css[t].map((t=>a.$style(t)))}))}getType(){return`${this.getName()}-${this.className}`}_processCss(t,e){let n={};for(let s of[["cssGlobal"],["cssLocal",this.classPrefix],["cssInstance",t]]){let t=s[0],i=s[1];if(n[t]=[],e[t])for(let s of e[t])s&&n[t].push(this._stringify(i,s))}return n}_stringify(t,e){let n="";for(let s of Object.keys(e)){let i;s.match(/^@/)&&(i=e[s][":rule"],delete e[s][":rule"]);let o=e[s];void 0!==i?(n+=`${s} ${i} {\n`,n+=this._stringify(t,o),n+="}\n"):(n+=`${t?s.replace(/([\.#])/g,`$1${t}`):s} `,n+=this._stringifyObj(o,""))}return n}_stringifyObj(t,e){if(!(t instanceof Object))return void 0!==t&&t.toString?t.toString():"";let n="{\n";for(let s of Object.keys(t)){let i=t[s],o=s.replace(/([A-Z])/g,(t=>"-"+t.toLowerCase()));i=i.reduce?i.reduce(((t,n)=>t+" "+this._stringifyObj(n,e+"  ")),""):i.rgbaString?i.rgbaString:i.toString(),i=i.replace(/\s+/," "),"}"!==i.substr(-2,1)?n+=`${e}  ${o}: ${i};\n`:n+=`${e}  ${o} ${i}`}return n+=`${e}}\n`,n}}class d extends u{static init(t){l=t,p.init(t)}constructor(){super(),this.jstStyleLookup={},this.jstStyles=[]}render(){return this.jstStyles}updateCss(t,e){let n=t.getClassPrefix(),s=t.getFullPrefix(),i=this.jstStyleLookup[n],o=!1;i||(i=new p(n,t.getName()),o=!0),i.updateCss(s,e),o?this._addStyle(i,n):i.refresh()}removeCss(t){let e=t.getClassPrefix(),n=t.getFullPrefix(),s=this.jstStyleLookup[e];s&&(s.removeCss(n),this._removeStyle(s,e))}_addStyle(t,e){this.jstStyles.push(t),this.jstStyleLookup[e]=t,this.refresh()}_removeStyle(t,e){}_removeAll(){this.jstStyles=[],this.jstStyleLookup={},this.refresh()}}function f(t){if(t instanceof HTMLElement)return new i(t);{let e=document.querySelector(t);return e?new i(e):new i}}f.fn=f.prototype={},f.extend=f.fn.extend=function(){let t=this,e=arguments.length;for(let n=0;n<e;n++){let e;if(null!==(e=arguments[n]))for(let n in e){let s=e[n];t!==s&&void 0!==s&&(t[n]=s)}}return t},f.extend({debug:!1,tagPrefix:"$",Object:u,Component:u,Form:o,Element:i,tags:["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","command","data","datalist","dd","del","details","dfn","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","math","menu","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"],svgTags:["altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hatch","hatchpath","hkern","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","solidcolor","stop","svg","switch","symbol","text","textPath","tref","tspan","unknown","use","view","vkern"],cssFuncs:["attr","calc","cubic-bezier","hsl","hsla","linear-gradient","radial-gradient","repeating-linear-gradient","repeating-radial-gradient","rgb","rgba","var","translate","matrix","matrix3d","translate","translate3d","translateX","translateY","translateZ","scale","scale3d","scaleX","scaleY","scaleZ","rotate","rotate3d","rotateX","rotateY","rotateZ","skew","skewX","skewY","perspective"],cssUnits:["cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","deg","rad","s"],addCustomElements:function(){let t=e._flatten.apply(this,arguments);for(let n of t)f[f.tagPrefix+n]=function(){let t=e._flatten.apply(this,arguments);return new i(n,t)}},addCustomElementsNS:function(t,n){for(let s of t)f[f.tagPrefix+s]=function(){let t=e._flatten.apply(this,arguments),o=new i(s,t);return o.ns=n,o}},addCssFunctions:function(){let t=e._flatten.apply(this,arguments);for(let n of t)f[n.replace(/-([a-z])/g,(t=>t[1].toUpperCase()))]=function(){let t=e._flatten.apply(this,arguments);return`${n}(${t.join(",")})`}},addCssUnits:function(){let t=e._flatten.apply(this,arguments);for(let n of t)f[n]=function(){let t=e._flatten.apply(this,arguments),s=t.map((t=>`${t}${n}`));return s.join(" ")+" "}},object:function(t){if("object"!=typeof t)throw new Error("You must pass an object to jst.object()");return t.$jst=new u(t)},makeGlobal:function(t){f.global=!0,f.globalTagPrefix=t||f.tagPrefix;for(let t of f.tags.concat(f.svgTags)){let e=f.globalTagPrefix+t;(void 0!==n.g?n.g:window)[e]=function(){return f[e].apply(this,arguments)}}},if:function(t,e,n){e=e||!0;let s=typeof t;return"number"===s?e:"undefined"===s||null===t?n:Array.isArray(t)?t.length?e:n:"object"===s?0===Object.keys(t).length&&t.constructor===Object?n:e:t?e:n},setDebug:function(t){f.debug=t},_init:function(){i.init(f),u.init(f),d.init(f),f.addCustomElements(f.tags),f.addCustomElementsNS(f.svgTags,"http://www.w3.org/2000/svg"),f.addCssFunctions(f.cssFuncs),f.addCssUnits(f.cssUnits),f.styleManager=new d,"undefined"!=typeof window?f("head").appendChild(f.styleManager):n.g.HTMLElement=class{}}}),f._init(),f.print=(t,e)=>{let n=" ".repeat(2*(e=e||0)),s=n+`${t.tag} ${t.id}:\n`;return s+=n+`  attrs: ${Object.keys(t.attrs).length}\n`,s+=n+`  props: ${t.props.length}\n`,s+=n+`  events: ${Object.keys(t.events).length}\n`,s+=n+`  hasEl: ${t.el?"yes":"no"}\n`,s+=n+`  hasParentEl: ${t.el&&t.el.parentNode?"yes":"no"}\n`,t.contents.forEach((t=>{1===t.type?s+=f.print(t.value,e+1):2===t.type&&t.value._jstEl?(s+=n+`    Component ${t.value.constructor.name}\n`,s+=f.print(t.value._jstEl,e+2)):3===t.type&&(s+=n+`    Text: ${t.value}\n`)})),0==e&&console.log(s),s};var m=n(123),g=n.n(m);class v extends f.Component{constructor(t,e,n){super(),this.app=t,this.resize(e,n)}cssLocal(){return{header$i:{width:"100%"},iconDiv$c:{display:"inline-block",margin$pt:[5,5,0,5],width$pt:40,height$pt:40,borderRadius$pt:8,overflow:"hidden",cursor:"pointer"},logoDiv$c:{display:"inline-block",margin$pt:[5,5,0,5],borderRadius$pt:8,cursor:"pointer"},icon$c:{width$pt:40,height$pt:40},logo$c:{width$pt:250},name$c:{display:"inline-block",fontSize:"250%",fontWeight:"bold",verticalAlign:"bottom",margin$pt:[10,10]},navBox$c:{display:"inline-block",float:"right",marginBottom$pt:15},navItem$c:{display:"inline-block",color:"#008100",fontSize:"120%",margin$pt:[15,15,0,15],cursor:"pointer"},navItem$hover$c:{color:"#3333dd"},demoLink$hover$c:{color:"#3333dd"},demoLink$c:{textDecoration:"none",color:"#000"}}}render(){return f.$div({id:"header"},f.$div({cn:"-logoDiv",events:{click:t=>this.navigate("home")}},f.$img({cn:"-logo",src:"img/simon-services-logo.png"})),f.$div({cn:"-navBox"},f.$div({cn:"-navItem",events:{click:t=>this.navigate("home")}},"Home"),f.$div({cn:"-navItem",events:{click:t=>this.navigate("testimonials")}},"Testimonials"),f.$div({cn:"-navItem",events:{click:t=>this.navigate("faq")}},"FAQ"),f.$div({cn:"-navItem",events:{click:t=>this.navigate("about")}},"About Me")))}navigate(t){this.app.navigate(t)}resize(t,e){this.width=t,this.height=e,this.refresh()}scrollTo(t,e){window.scroll(t||0,e||0)}}const y={"**":"-bold","*":"-italic","`":"-code"};class _ extends f.Component{constructor(t){super(),this.md=t}cssLocal(){return{heading1$c:{fontSize:"150%",margin$pt:[12,0,9,0],fontWeight:"bold"},heading2$c:{fontSize:"130%",margin$pt:[10,0,8,0],fontWeight:"bold"},heading3$c:{fontSize:"120%",margin$pt:[8,0,7,0],fontWeight:"bold"},heading4$c:{fontSize:"110%",fontWeight:"bold"},paraBreak$c:{height$pt:10},inline$c:{display:"inline"},bold$c:{fontWeight:"bold"},italic$c:{fontStyle:"italic"},underline$c:{fontDecoration:"underline"},code$c:{whiteSpace:"pre",unicodeBidi:"embed",fontFamily:"monospace"},caption$c:{fontWeight:"bold",fontSize:"90%"},imgDiv$c:{width:"100%",margin$pt:[10,0,10,0],textAlign:"center"},li:{margin$pt:[0,0,0,10]},img$c:{maxWidth:"100%",border$px:[2,"solid",f.rgba(0,0,0,.5)],boxShadow$px:[0,3,8,f.rgba(0,0,0,.4)]},center$c:{textAlign:"center"}}}render(){return this.convert(this.md)}convert(t){let e=t.split(/\n/),n=f.$div(),s=[[n,"top"]];return e.forEach((t=>{let e;if(this.checkForSectionCompletion(s,t),e=t.match(/^\s*$/))this.append(s[0][0],"-paraBreak","");else if(e=t.match(/^\s*(#+)(.*)/))this.append(s[0][0],`-heading${e[1].length}`,e[2]);else if(e=t.match(/^\s*(>\s)(.*)/))this.append(s[0][0],"-caption",e[2]);else if(e=t.match(/^\s*(\d+\.)(.*)/)){if("ol"!=s[0][1]){let t=f.$ol();s[0][0].appendChild(t),s.unshift([t,"ol"])}let t=f.$li();this.convertLine(t,e[2]),s[0][0].appendChild(t)}else if(e=t.match(/^\s+(-\s+)(.*)/)){if("ul"!=s[0][1]){let t=f.$ul();s[0][0].appendChild(t),s.unshift([t,"ul"])}let t=f.$li();this.convertLine(t,e[2]),s[0][0].appendChild(t)}else s[0][0].appendChild(this.convertLine(s[0][0],t))})),n}convertLine(t,e){let n=[t];for(;e&&e.length;){let t;if(t=e.match(/^(.*?)((?:\*\*)|(?:\*)|(?:\`)|(?:\!\[)|(?:\[))(.*)/)){let[s,i,o,r]=t;if(y[o]){let t,s=`^(.*?)${"\\"+o.split("").join("\\")}(.*)`,a=new RegExp(s);(t=r.match(a))?(this.append(n[0],"-inline",i),this.append(n[0],"-inline "+y[o],t[1]),e=t[2]):(this.append(n[0],"-inline",i+o+" "),e=r)}else if("["==o){let t;(t=r.match(/(.*?)\]\(([^)]+)\)(.*)/))?(this.append(n[0],"-inline",i),n[0].appendChild(f.$a({href:t[2]},t[1])),e=t[3]):(this.append(n[0],"-inline",i+o+" "),e=r)}else if("!["==o){let t;if(t=r.match(/(.*?)\]\(([^)]+)(.*)\)/)){let s=t[1].match(/^(\!)?(.*)/),o=s[2];this.append(n[0],"-inline",i),n[0].appendChild(f.$div({cn:"-imgDiv"},f.$img({cn:"-img -center",src:t[2],title:o}),f.if(!s[1])&&f.$div({cn:"-caption"},o))),e=t[3]}else this.append(n[0],"-inline",i+o+" "),e=r}else this.append(n[0],"-inline",i+o+" "),e=r}else this.append(n[0],"-inline",e+" "),e=""}}checkForSectionCompletion(t,e){let[n,s]=t[0];"ol"==s?e.match(/^\s*\d+\./)||(t.shift(),this.checkForSectionCompletion(t,e)):"ul"==s&&(e.match(/^\s*-/)||(t.shift(),this.checkForSectionCompletion(t,e)))}append(t,e,n){t.appendChild(f.$div({cn:e},n))}}class b extends f.Component{constructor(){super()}cssLocal(){return{body$i:{lineHeight$pt:17}}}render(){return f.$div({id:"-body",events:{}},new _(this.page))}}class w extends b{constructor(){super(),this.page="\nWelcome to the support page for **Hidden Artist**. I will do everything I can \nto solve your problem. \n\n## Reporting a Problem\n\nThe best way to report a bug or problem that you are experiencing within Hidden Artist is\nto [raise an issue](https://github.com/HiddenArtist/hidden-artist-docs-and-issues/issues). \nReproducible issues raised will be prioritized and fixed in future releases. It is a good\nplace to discuss the problem and find a workaround.\n\n## Getting Help\n\nIf you are trying to do something that you believe is possible but you can't find out how to do it, the\nbest place to start is to watch the [Tutorials](#/tutorials) or check out the [Frequently Asked Questions](#/faq).\nIf you still don't know the answer, you can [post a question here](https://apple.stackexchange.com/).\n\n\n# Privacy Policy\n\n#### Hidden Artist Collects No Personal Information\n\nWe do not collect, use, save or have access to any of your personal data that is used within\nthe Hidden Artist App. \n\nIf you choose to import personal photos from your Photo Library, you will be asked to\ngrant access to some of those photos. All imported photos are only stored within the App \nand not sent to any external location, with the exception of images that you choose to share \nthrough the normal sharing mechanism on your device. Any sharing that occurs is performed\nby the operating system of your device and is not examined, transmitted or stored by Hidden\nArtist in any way.\n\nYou can choose to delete any painting at any time in Hidden Artist and all underlying information\nused in creating those paintings, including imported images or photos, is removed.\n\nNo location information is gathered and no tracking of any kind is done.\n\n\n"}}class C extends b{constructor(){super(),this.page="\n![Simon F](/img/simon-small.jpg)\n\n# About Simon\n\nHi, I'm Simon. I live in Old Ottawa East with my family.\n\n\n"}}class j extends b{constructor(){super(),this.page="\n# Welcome to Simon Services\n\nHi, I'm Simon. I am a young boy who will do many odd jobs that you don't want to do.\nYou pay me for the exact amount of time I work for you.\n\n## Services\n  - Snow Removal\n  - Yard work (mowing, raking, gardening, etc)\n  - Car washing and vacuuming\n  - Cleaning\n  - House care while you are away\n  - And anything else suitable for an early teenager\n\n## How much do I charge?\n\nI charge $15 per hour.\n\n## How do you book my services?\n\nPlease email me at [simonservices75@gmail.com](mailto:simonservices75@gmail.com)\n\n## How do I keep track of my work?\n\nI create a shared spreadsheet on Google Drive that itemizes all of my work with \ndetails like date, time, and amount of time spent.\n\n## How can you pay me?\n\nYou can either pay cash or you can email me the money with Interact.\n\n"}}class k extends b{constructor(){super(),this.page="\n# Frequently Asked Questions\n\n## Q: Why are you doing this?\n\n\n## Q: How can I pay you?\n\n\n## Q: What jobs won't you do?\n\n\n## Q: How often do I need to pay you?\n\n\n## Q: How can I pay you?\n\nYou can use Interact to pay me by sending me a email transfer to simonservices75@gmail.com. Autodeposit is \nenabled.\n\nAlternatively, you can pay me by cash.\n\n## Q: What is this about a 'shared Google Drive spreadsheet'?\n\nI will send a link to a spreadsheet that is hosted within Google that keeps track \nof all work that I do for you. If you are unable to view it, that is okay. I can \nsend you the summary after the work is done with the exact amount that you owe me.\n\n\n\n"}}class $ extends b{constructor(){super(),this.page="\n# What people have to say about Simon Services\n\nI told him what I wanted to do, and he said, \"I'll do it.\" He then did the work and I was happy.\n\n  *-- Simon's Dad*\n\n\n"}}class x extends f.Component{constructor(t){super(),this.title="Hidden Artist",this.debug=!1,this.currPage=void 0,this.router=new(g())("/",{hash:!0}),this.header=new v(this,this.width,this.height),this.initRouter(),this.router.resolve()}cssGlobal(){return{body:{fontFamily:'"Helvetica Neue", Helvetica, Arial, sans-serif',color:"black",backgroundColor:"white",padding$px:0,margin$px:0,maxWidth$px:800,margin:"auto"},page$c:{margin$pt:[30,15,0,15]}}}render(){return f.$div({id:"app"},this.header,f.$div({cn:"page"},this.currPage))}initRouter(){this.router.on("/",(()=>{this.router.navigate("/home")})),this.router.on("/home",(()=>{this.currPage=new j(this),this.refresh()})),this.router.on("/faq",(()=>{this.currPage=new k(this),this.refresh()})),this.router.on("/about",(()=>{this.currPage=new C(this),this.refresh()})),this.router.on("/support",(()=>{this.currPage=new w(this),this.refresh()})),this.router.on("/testimonials",(()=>{this.currPage=new $(this),this.refresh()}))}navigate(t){this.router.navigate("/"+t)}getTitle(){return this.title}}let O=new x;f("body").appendChild(O)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,